<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="]a+S(P:HAigib[)l*uz." x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Q=?jCQ}vSLoH$uQ1e*Aw"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace kuangRobot {" line1="" line2="    //% block" line3="    //% value.min=0 value.max=127" line4="    //% value.defl=18" line5="    //% block=&quot;Initiate the line sensor at I2C address %value&quot;" line6="    export function startLineSensor(value: number): void {" line7="        pins.i2cWriteNumber(value, 48, NumberFormat.Int8LE, false)" line8="    }" line9="" line10="    //% block" line11="    //% value.min=0 value.max=127" line12="    //% value.defl=18" line13="    //% block=&quot;Read line sensor for LEFT motor at I2C address %value&quot;" line14="    export function readLineLeft(value: number): number {" line15="        basic.pause(1)" line16="        let sensor_value = pins.i2cReadNumber(value, NumberFormat.Int8LE, false)" line17="        return sensor_value &lt;= -2 ? 1023 : Math.map(sensor_value, 0, 128, 1023, 0)" line18="    }" line19="" line20="    //% block" line21="    //% value.min=0 value.max=127" line22="    //% value.defl=18" line23="    //% block=&quot;Read line sensor for RIGHT motor at I2C address %value&quot;" line24="    export function readLineRight(value: number): number {" line25="        basic.pause(1)" line26="        let sensor_value2 = pins.i2cReadNumber(value, NumberFormat.Int8LE, false)" line27="        return sensor_value2 &lt;= -2 ? Math.map(sensor_value2, -128, -2, 1023, 0) : 1023" line28="    }" line29="" line30="    //% block=&quot;Set line-following speed: left %left_speed right %right_speed&quot;" line31="    //% left_speed.min=0 left_speed.max=1023" line32="    //% right_speed.min=0 right_speed.max=1023" line33="    export function setLineFollowingSpeed(left_speed: number, right_speed: number): void {" line34="        pins.analogWritePin(AnalogPin.P12, 0)" line35="        pins.analogWritePin(AnalogPin.P13, left_speed)" line36="        pins.analogWritePin(AnalogPin.P14, 0)" line37="        pins.analogWritePin(AnalogPin.P15, right_speed)" line38="    }" line39="" line40="    //% block=&quot;Stop robot&quot;" line41="    export function robotStop(): void {" line42="        pins.analogWritePin(AnalogPin.P12, 0)" line43="        pins.analogWritePin(AnalogPin.P13, 0)" line44="        pins.analogWritePin(AnalogPin.P14, 0)" line45="        pins.analogWritePin(AnalogPin.P15, 0)" line46="    }" line47="" line48="    //% block" line49="    //% value.min=0 value.max=1023" line50="    //% value2.min=0 value2.max=1023" line51="    //% value.defl=512" line52="    //% value2.defl=512" line53="    //% blockId=&quot;KuangRobot_move&quot; block=&quot;Drive motor at left %value and right %value2&quot;" line54="    export function moveRobot(value: number, value2: number): void {" line55="        let leftPWM = Math.map(value, 0, 1023, 0, 1023)" line56="        let rightPWM = Math.map(value2, 0, 1023, 0, 1023)" line57="        pins.analogWritePin(AnalogPin.P13, leftPWM)" line58="        pins.analogWritePin(AnalogPin.P15, rightPWM)" line59="    }" line60="" line61="    //% block" line62="    export function remoteControlSetup(): void {" line63="        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)" line64="        pins.setPull(DigitalPin.P13, PinPullMode.PullUp)" line65="        pins.setPull(DigitalPin.P14, PinPullMode.PullUp)" line66="        pins.setPull(DigitalPin.P15, PinPullMode.PullUp)" line67="        pins.setPull(DigitalPin.P16, PinPullMode.PullUp)" line68="    }" line69="" line70="    //% block" line71="    export function remoteControlSending(): void {" line72="        const k_x = pins.analogReadPin(AnalogReadWritePin.P2)" line73="        const k_y = pins.analogReadPin(AnalogReadWritePin.P1)" line74="        const k_s = pins.digitalReadPin(DigitalPin.P8)" line75="        const k_b1 = pins.digitalReadPin(DigitalPin.P13)" line76="        const k_b2 = pins.digitalReadPin(DigitalPin.P14)" line77="        const k_b3 = pins.digitalReadPin(DigitalPin.P15)" line78="        const k_b4 = pins.digitalReadPin(DigitalPin.P16)" line79="" line80="        // Short comma-separated message format" line81="        const msg = `${k_x},${k_y},${k_s},${k_b1},${k_b2},${k_b3},${k_b4}`" line82="        radio.sendString(msg)" line83="        basic.pause(1)" line84="    }" line85="" line86="    //% block" line87="    //% blockId=&quot;KuangRobot_remote&quot; block=&quot;Remote control with command %input&quot;" line88="    export function RemoteControlRobot(input: string): void {" line89="        let parts = input.split(&quot;,&quot;)" line90="" line91="        // Extract values by order" line92="        let k_x2 = parseInt(parts[0])" line93="        let k_y2 = parseInt(parts[1])" line94="        let k_s2 = parseInt(parts[2])" line95="        let k_b12 = parseInt(parts[3])" line96="        let k_b22 = parseInt(parts[4])" line97="        let k_b32 = parseInt(parts[5])" line98="        let k_b42 = parseInt(parts[6])" line99="" line100="        let L_Speed = 1023" line101="        let R_Speed = 1023" line102="        let L_percentage = 0" line103="        let R_percentage = 0" line104="        let L_percentage_backward = 0" line105="        let R_percentage_backward = 0" line106="" line107="        if (k_y2 &lt; 506) {" line108="            L_percentage = Math.map(k_y2, 505, 0, 0, 1)" line109="            R_percentage = Math.map(k_y2, 505, 0, 0, 1)" line110="        } else if (k_y2 &gt; 510) {" line111="            L_percentage_backward = Math.map(k_y2, 511, 1023, 0, 1)" line112="            R_percentage_backward = Math.map(k_y2, 511, 1023, 0, 1)" line113="        }" line114="" line115="        if (k_x2 &gt;= 507 &amp;&amp; k_x2 &lt;= 509 &amp;&amp; k_y2 &gt;= 507 &amp;&amp; k_y2 &lt;= 509) {" line116="            L_percentage = 0" line117="            R_percentage = 0" line118="            L_percentage_backward = 0" line119="            R_percentage_backward = 0" line120="        }" line121="" line122="        if (k_b12 == 0) {" line123="            pins.analogWritePin(AnalogPin.P13, 0)" line124="            pins.analogWritePin(AnalogPin.P12, 200)" line125="            pins.analogWritePin(AnalogPin.P15, 200)" line126="            pins.analogWritePin(AnalogPin.P14, 0)" line127="            basic.pause(10)" line128="        }" line129="" line130="        if (k_b42 == 0) {" line131="            pins.analogWritePin(AnalogPin.P13, 200)" line132="            pins.analogWritePin(AnalogPin.P12, 0)" line133="            pins.analogWritePin(AnalogPin.P15, 0)" line134="            pins.analogWritePin(AnalogPin.P14, 200)" line135="            basic.pause(10)" line136="        }" line137="" line138="        pins.analogWritePin(AnalogPin.P13, L_Speed * L_percentage)" line139="        pins.analogWritePin(AnalogPin.P12, L_Speed * L_percentage_backward)" line140="        pins.analogWritePin(AnalogPin.P15, R_Speed * R_percentage)" line141="        pins.analogWritePin(AnalogPin.P14, R_Speed * R_percentage_backward)" line142="    }" line143="" line144="" line145="" line146="" line147="}" numlines="148"></mutation></block></statement></block></xml>