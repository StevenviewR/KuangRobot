<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="|aAYjG7q{4JCnDt6w%z3" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="+KpOWoje*GR#w)gSw)zP"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace kuangRobot {" line1="" line2="    //% block" line3="    //% value.min=0 value.max=127" line4="    //% value.defl=18" line5="    //% block=&quot;Initiate the line sensor at I2C address %value&quot;" line6="    export function startLineSensor(value: number): void {" line7="        pins.i2cWriteNumber(value, 48, NumberFormat.Int8LE, false)" line8="    }" line9="" line10="    //% block" line11="    //% value.min=0 value.max=127" line12="    //% value.defl=18" line13="    //% block=&quot;Read line sensor for LEFT motor at I2C address %value&quot;" line14="    export function readLineLeft(value: number): number {" line15="        //basic.pause(1)" line16="        let sensor_value = pins.i2cReadNumber(value, NumberFormat.Int8LE, false)" line17="        return sensor_value &lt;= -2 ? 1023 : Math.map(sensor_value, 0, 128, 1023, 0)" line18="    }" line19="" line20="    //% block" line21="    //% value.min=0 value.max=127" line22="    //% value.defl=18" line23="    //% block=&quot;Read line sensor for RIGHT motor at I2C address %value&quot;" line24="    export function readLineRight(value: number): number {" line25="        //basic.pause(1)" line26="        let sensor_value2 = pins.i2cReadNumber(value, NumberFormat.Int8LE, false)" line27="        return sensor_value2 &lt;= -2 ? Math.map(sensor_value2, -128, -2, 1023, 0) : 1023" line28="    }" line29="" line30="    //% block=&quot;Set line-following speed: left %left_speed right %right_speed&quot;" line31="    //% left_speed.min=0 left_speed.max=1023" line32="    //% right_speed.min=0 right_speed.max=1023" line33="    export function setLineFollowingSpeed(left_speed: number, right_speed: number): void {" line34="        pins.analogWritePin(AnalogPin.P12, 0)" line35="        pins.analogWritePin(AnalogPin.P13, left_speed)" line36="        pins.analogWritePin(AnalogPin.P14, 0)" line37="        pins.analogWritePin(AnalogPin.P15, right_speed)" line38="    }" line39="" line40="    //% block=&quot;Stop robot&quot;" line41="    export function robotStop(): void {" line42="        pins.analogWritePin(AnalogPin.P12, 0)" line43="        pins.analogWritePin(AnalogPin.P13, 0)" line44="        pins.analogWritePin(AnalogPin.P14, 0)" line45="        pins.analogWritePin(AnalogPin.P15, 0)" line46="    }" line47="" line48="    //% block" line49="    //% value.min=0 value.max=1023" line50="    //% value2.min=0 value2.max=1023" line51="    //% value.defl=512" line52="    //% value2.defl=512" line53="    //% blockId=&quot;KuangRobot_move&quot; block=&quot;Drive motor at left %value and right %value2&quot;" line54="    export function moveRobot(value: number, value2: number): void {" line55="        let leftPWM = Math.map(value, 0, 1023, 0, 1023)" line56="        let rightPWM = Math.map(value2, 0, 1023, 0, 1023)" line57="        pins.analogWritePin(AnalogPin.P13, leftPWM)" line58="        pins.analogWritePin(AnalogPin.P15, rightPWM)" line59="    }" line60="" line61="    //% block" line62="    //% blockId=&quot;remoteControlSetup&quot; block=&quot; Remote Control Setup UpDown (Y): %UpDown LeftRight (X): %LeftRight B1: %B1 B2: %B2 B3: %B3 B4: %B4&quot;" line63="    export function remoteControlSetup(UpDown: AnalogPin, LeftRight: AnalogPin, B1: AnalogPin, B2: AnalogPin, B3: AnalogPin, B4: AnalogPin): void {" line64="        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)" line65="        pins.setPull(DigitalPin.P13, PinPullMode.PullUp)" line66="        pins.setPull(DigitalPin.P14, PinPullMode.PullUp)" line67="        pins.setPull(DigitalPin.P15, PinPullMode.PullUp)" line68="        pins.setPull(DigitalPin.P16, PinPullMode.PullUp)" line69="    }" line70="" line71="    //% block" line72="    export function remoteControlSending(): void {" line73="        const k_x = pins.analogReadPin(AnalogReadWritePin.P2)" line74="        const k_y = pins.analogReadPin(AnalogReadWritePin.P1)" line75="        const k_s = pins.digitalReadPin(DigitalPin.P8)" line76="        const k_b1 = pins.digitalReadPin(DigitalPin.P13)" line77="        const k_b2 = pins.digitalReadPin(DigitalPin.P14)" line78="        const k_b3 = pins.digitalReadPin(DigitalPin.P15)" line79="        const k_b4 = pins.digitalReadPin(DigitalPin.P16)" line80="" line81="        // Short comma-separated message format" line82="        const msg = `${k_x},${k_y},${k_s},${k_b1},${k_b2},${k_b3},${k_b4}`" line83="        radio.sendString(msg)" line84="        basic.pause(1)" line85="    }" line86="" line87="    //% block" line88="    //% high.min=0 up_value.max=180" line89="    //% high.defl=0" line90="    //% low.min=0 down_value.max=180" line91="    //% low.defl=0" line92="    //% blockId=&quot;KuangRobot_remote&quot; block=&quot;Receive Remote control with command %input and current servo angle %in_angle low: %low  high: %high&quot;" line93="    export function RemoteControlRobot(input: string, in_angle: number, low: number, high: number): number {" line94="        let parts = input.split(&quot;,&quot;)" line95="" line96="        let k_x2 = parseInt(parts[0])" line97="        let k_y2 = parseInt(parts[1])" line98="        let k_s2 = parseInt(parts[2])" line99="        let k_b12 = parseInt(parts[3])" line100="        let k_b22 = parseInt(parts[4])" line101="        let k_b32 = parseInt(parts[5])" line102="        let k_b42 = parseInt(parts[6])" line103="" line104="        let center = 512" line105="        let deadzone = 40" line106="" line107="        // Normalize inputs to -1 to 1" line108="        let x = (center - k_x2) / center" line109="        let y = (k_y2 - center) / center" line110="" line111="        // Apply deadzone" line112="        if (Math.abs(x) &lt; deadzone / center) x = 0" line113="        if (Math.abs(y) &lt; deadzone / center) y = 0" line114="" line115="        // Combine movement" line116="        // Differential drive logic: " line117="        // Left = y + x, Right = y - x" line118="        let leftPower = (y - x)" line119="        let rightPower = (y + x)" line120="" line121="        // Clamp to [-1, 1]" line122="        leftPower = Math.max(-1, Math.min(1, leftPower))" line123="        rightPower = Math.max(-1, Math.min(1, rightPower))" line124="" line125="        let L_Speed = 1023" line126="        let R_Speed = 1023" line127="" line128="        let L_pwm_fwd = 0, L_pwm_bwd = 0" line129="        let R_pwm_fwd = 0, R_pwm_bwd = 0" line130="" line131="        // Convert to forward/backward PWM values" line132="        if (leftPower &gt;= 0) {" line133="            L_pwm_fwd = L_Speed * leftPower" line134="        } else {" line135="            L_pwm_bwd = L_Speed * -leftPower" line136="        }" line137="" line138="        if (rightPower &gt;= 0) {" line139="            R_pwm_fwd = R_Speed * rightPower" line140="        } else {" line141="            R_pwm_bwd = R_Speed * -rightPower" line142="        }" line143="" line144="        // Stop condition" line145="        if (x == 0 &amp;&amp; y == 0) {" line146="            L_pwm_fwd = 0" line147="            L_pwm_bwd = 0" line148="            R_pwm_fwd = 0" line149="            R_pwm_bwd = 0" line150="        }" line151="" line152="        // Button overrides" line153="        if (k_b12 == 0) {" line154="            // Turn left" line155="            pins.analogWritePin(AnalogPin.P13, 0)" line156="            pins.analogWritePin(AnalogPin.P12, 200)" line157="            pins.analogWritePin(AnalogPin.P15, 200)" line158="            pins.analogWritePin(AnalogPin.P14, 0)" line159="            basic.pause(5)" line160="        }" line161="" line162="        if (k_b42 == 0) {" line163="            // Turn right" line164="            pins.analogWritePin(AnalogPin.P13, 200)" line165="            pins.analogWritePin(AnalogPin.P12, 0)" line166="            pins.analogWritePin(AnalogPin.P15, 0)" line167="            pins.analogWritePin(AnalogPin.P14, 200)" line168="            basic.pause(5)" line169="        }" line170="" line171="        if (k_b22 == 0) {" line172="            in_angle = high" line173="        }" line174="" line175="        if (k_b32 == 0) {" line176="            in_angle = low" line177="        }" line178="" line179="        // Apply final motor PWM values" line180="        pins.analogWritePin(AnalogPin.P13, L_pwm_bwd)" line181="        pins.analogWritePin(AnalogPin.P12, L_pwm_fwd)" line182="        pins.analogWritePin(AnalogPin.P15, R_pwm_bwd)" line183="        pins.analogWritePin(AnalogPin.P14, R_pwm_fwd)" line184="" line185="        return in_angle" line186="    }" line187="" line188="" line189="" line190="    //% block" line191="    //% LeftMotorPin1.defl=12" line192="    //% LeftMotorPin2.defl=13" line193="    //% RightMotorPin1.defl=14" line194="    //% RightMotorPin2.defl=15" line195="    //% blockId=&quot;KuangRobot_motorDriverPins&quot; block=&quot;Motor Driver Pin | Left Motor=  %LeftMotorPin1 %LeftMotorPin2 | Right Motor= %RightMotorPin1 %RightMotorPin2&quot;" line196="    export function motorDriverPins(LeftMotorPin1: AnalogPin, LeftMotorPin2: AnalogPin, RightMotorPin1: AnalogPin, RightMotorPin2: AnalogPin): void {" line197="" line198="    }" line199="" line200="    //% block" line201="    //% blockId=&quot;servo&quot; block=&quot;Target Servo Angle: %targetAngle  Current Servo Angle: %currentAngle ServoPin: %servoPin&quot;" line202="    export function servoMove(targetAngle: number, currentAngle: number, servoPin: AnalogPin): number {" line203="        if (targetAngle != currentAngle) {" line204="            currentAngle = targetAngle" line205="            pins.servoWritePin(servoPin, currentAngle)" line206="            basic.pause(500)" line207="        }" line208="        return currentAngle" line209="    }" line210="" line211="    //% block" line212="    //% high.min=0 up_value.max=180" line213="    //% high.defl=0" line214="    //% low.min=0 down_value.max=180" line215="    //% low.defl=0" line216="    //% blockId=&quot;KuangRobot_FaceExpress&quot; block=&quot;Receive Remote control with command %input for Face Expression&quot;" line217="    export function RemoteControlRobotFace(input: string): void {" line218="        let parts2 = input.split(&quot;,&quot;)" line219="" line220="        let k_x22 = parseInt(parts2[0])" line221="        let k_y22 = parseInt(parts2[1])" line222="        let k_s22 = parseInt(parts2[2])" line223="        let k_b122 = parseInt(parts2[3])" line224="        let k_b222 = parseInt(parts2[4])" line225="        let k_b322 = parseInt(parts2[5])" line226="        let k_b422 = parseInt(parts2[6])" line227="" line228="        let center2 = 512" line229="        let deadzone2 = 40" line230="" line231="        // Normalize inputs to -1 to 1" line232="        let x2 = (center2 - k_x22) / center2" line233="        let y2 = (k_y22 - center2) / center2" line234="" line235="        // Apply deadzone" line236="        if (Math.abs(x2) &lt; deadzone2 / center2) x2 = 0" line237="        if (Math.abs(y2) &lt; deadzone2 / center2) y2 = 0" line238="" line239="        // Combine movement" line240="        // Differential drive logic: " line241="        // Left = y + x, Right = y - x" line242="        let leftPower2 = (y2 - x2)" line243="        let rightPower2 = (y2 + x2)" line244="" line245="        // Clamp to [-1, 1]" line246="        leftPower2 = Math.max(-1, Math.min(1, leftPower2))" line247="        rightPower2 = Math.max(-1, Math.min(1, rightPower2))" line248="" line249="        let L_Speed2 = 1023" line250="        let R_Speed2 = 1023" line251="" line252="        // Convert to forward/backward PWM values" line253="        if (leftPower2 &gt; 0 &amp;&amp; rightPower2 &gt; 0) {" line254="            //forward" line255="            basic.showIcon(IconNames.Asleep);" line256="" line257="        }" line258="        else if (leftPower2 &lt; 0 &amp;&amp; rightPower2 &lt; 0) {" line259="            //backward" line260="            basic.showIcon(IconNames.Angry)" line261="        }" line262="        else if (leftPower2 &gt;= 0 &amp;&amp; rightPower2 &lt; 0) {" line263="            // Turn right" line264="            basic.showLeds(`" line265="        . . # . ." line266="        . . . # ." line267="        # # # # #" line268="        . . . # ." line269="        . . # . ." line270="        `);" line271="        }" line272="        else if (leftPower2 &lt; 0 &amp;&amp; rightPower2 &gt;= 0) {" line273="            // Turn left" line274="            basic.showLeds(`" line275="        . . # . ." line276="        . # . . ." line277="        # # # # #" line278="        . # . . ." line279="        . . # . ." line280="        `);" line281="        }" line282="        else {" line283="            basic.showIcon(IconNames.Happy);" line284="        }" line285="" line286="        // Button overrides" line287="        if (k_b222 == 0 || k_b322 == 0) {" line288="            basic.showIcon(IconNames.Heart);" line289="            music.play(" line290="                music.builtinPlayableSoundEffect(soundExpression.giggle)," line291="                music.PlaybackMode.UntilDone" line292="            );" line293="" line294="" line295="        }" line296="" line297="        if (k_s22 == 0) {" line298="" line299="            music.play(" line300="                music.builtinPlayableSoundEffect(soundExpression.hello)," line301="                music.PlaybackMode.UntilDone" line302="            );" line303="            basic.showString(&quot;Hello!&quot;)" line304="        }" line305="" line306="" line307="    }" line308="" line309="" line310="}" numlines="311"></mutation></block></statement></block></xml>