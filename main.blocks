<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="X[!~aICV{^y/)V,0dd3U" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="0-ykLK(5$s6wmi,%sK_^"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace kuangRobot {" line1="" line2="    //% block" line3="    //% value.min=0 value.max=127" line4="    //% value.defl=18" line5="    //% block=&quot;Initiate the line sensor at I2C address %value&quot;" line6="    export function startLineSensor(value: number): void {" line7="        pins.i2cWriteNumber(value, 48, NumberFormat.Int8LE, false)" line8="    }" line9="" line10="    //% block" line11="    //% value.min=0 value.max=127" line12="    //% value.defl=18" line13="    //% block=&quot;Read line sensor for LEFT motor at I2C address %value&quot;" line14="    export function readLineLeft(value: number): number {" line15="        basic.pause(1)" line16="        let sensor_value = pins.i2cReadNumber(value, NumberFormat.Int8LE, false)" line17="        return sensor_value &lt;= -2 ? 1023 : Math.map(sensor_value, 0, 128, 1023, 0)" line18="    }" line19="" line20="    //% block" line21="    //% value.min=0 value.max=127" line22="    //% value.defl=18" line23="    //% block=&quot;Read line sensor for RIGHT motor at I2C address %value&quot;" line24="    export function readLineRight(value: number): number {" line25="        basic.pause(1)" line26="        let sensor_value2 = pins.i2cReadNumber(value, NumberFormat.Int8LE, false)" line27="        return sensor_value2 &lt;= -2 ? Math.map(sensor_value2, -128, -2, 1023, 0) : 1023" line28="    }" line29="" line30="    //% block=&quot;Set line-following speed: left %left_speed right %right_speed&quot;" line31="    //% left_speed.min=0 left_speed.max=1023" line32="    //% right_speed.min=0 right_speed.max=1023" line33="    export function setLineFollowingSpeed(left_speed: number, right_speed: number): void {" line34="        pins.analogWritePin(AnalogPin.P12, 0)" line35="        pins.analogWritePin(AnalogPin.P13, left_speed)" line36="        pins.analogWritePin(AnalogPin.P14, 0)" line37="        pins.analogWritePin(AnalogPin.P15, right_speed)" line38="    }" line39="" line40="    //% block=&quot;Stop robot&quot;" line41="    export function robotStop(): void {" line42="        pins.analogWritePin(AnalogPin.P12, 0)" line43="        pins.analogWritePin(AnalogPin.P13, 0)" line44="        pins.analogWritePin(AnalogPin.P14, 0)" line45="        pins.analogWritePin(AnalogPin.P15, 0)" line46="    }" line47="" line48="    //% block" line49="    //% value.min=0 value.max=1023" line50="    //% value2.min=0 value2.max=1023" line51="    //% value.defl=512" line52="    //% value2.defl=512" line53="    //% blockId=&quot;KuangRobot_move&quot; block=&quot;Drive motor at left %value and right %value2&quot;" line54="    export function moveRobot(value: number, value2: number): void {" line55="        let leftPWM = Math.map(value, 0, 1023, 0, 1023)" line56="        let rightPWM = Math.map(value2, 0, 1023, 0, 1023)" line57="        pins.analogWritePin(AnalogPin.P13, leftPWM)" line58="        pins.analogWritePin(AnalogPin.P15, rightPWM)" line59="    }" line60="" line61="    //% block" line62="    //% blockId=&quot;remoteControlSetup&quot; block=&quot; Remote Control Setup UpDown: %UpDown LeftRight: %LeftRight B1: %B1 B2: %B2 B3: %B3 B4: %B4&quot;" line63="    export function remoteControlSetup(UpDown: AnalogPin, LeftRight: AnalogPin, B1: AnalogPin, B2:AnalogPin, B3:AnalogPin, B4:AnalogPin): void {" line64="        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)" line65="        pins.setPull(DigitalPin.P13, PinPullMode.PullUp)" line66="        pins.setPull(DigitalPin.P14, PinPullMode.PullUp)" line67="        pins.setPull(DigitalPin.P15, PinPullMode.PullUp)" line68="        pins.setPull(DigitalPin.P16, PinPullMode.PullUp)" line69="    }" line70="" line71="    //% block" line72="    export function remoteControlSending(): void {" line73="        const k_x = pins.analogReadPin(AnalogReadWritePin.P2)" line74="        const k_y = pins.analogReadPin(AnalogReadWritePin.P1)" line75="        const k_s = pins.digitalReadPin(DigitalPin.P8)" line76="        const k_b1 = pins.digitalReadPin(DigitalPin.P13)" line77="        const k_b2 = pins.digitalReadPin(DigitalPin.P14)" line78="        const k_b3 = pins.digitalReadPin(DigitalPin.P15)" line79="        const k_b4 = pins.digitalReadPin(DigitalPin.P16)" line80="" line81="        // Short comma-separated message format" line82="        const msg = `${k_x},${k_y},${k_s},${k_b1},${k_b2},${k_b3},${k_b4}`" line83="        radio.sendString(msg)" line84="        basic.pause(1)" line85="    }" line86="" line87="    //% block" line88="    //% high.min=0 up_value.max=180" line89="    //% high.defl=0" line90="    //% low.min=0 down_value.max=180" line91="    //% low.defl=0" line92="    //% blockId=&quot;KuangRobot_remote&quot; block=&quot;Receive Remote control with command %input and current servo angle %in_angle low: %low  high: %high&quot;" line93="    export function RemoteControlRobot(input: string, in_angle:number  ,low: number, high: number): number {" line94="        let parts = input.split(&quot;,&quot;)" line95="" line96="        let k_x2 = parseInt(parts[0])" line97="        let k_y2 = parseInt(parts[1])" line98="        let k_s2 = parseInt(parts[2])" line99="        let k_b12 = parseInt(parts[3])" line100="        let k_b22 = parseInt(parts[4])" line101="        let k_b32 = parseInt(parts[5])" line102="        let k_b42 = parseInt(parts[6])" line103="" line104="        let L_Speed = 1023" line105="        let R_Speed = 1023" line106="        let L_percentage = 0" line107="        let R_percentage = 0" line108="        let L_percentage_backward = 0" line109="        let R_percentage_backward = 0" line110="        let angle = in_angle" line111="" line112="        if (k_y2 &lt; 506) {" line113="            L_percentage = Math.map(k_y2, 505, 0, 0, 1)" line114="            R_percentage = Math.map(k_y2, 505, 0, 0, 1)" line115="        } else if (k_y2 &gt; 510) {" line116="            L_percentage_backward = Math.map(k_y2, 511, 1023, 0, 1)" line117="            R_percentage_backward = Math.map(k_y2, 511, 1023, 0, 1)" line118="        }" line119="" line120="        " line121="        if (k_x2 &lt; 460) {" line122="            L_percentage = Math.map(k_x2, 460, 0, 0, 1)" line123="            R_percentage_backward = Math.map(k_x2, 460, 0, 0, 1)" line124="        } else if (k_x2 &gt; 550) {" line125="             L_percentage_backward = Math.map(k_x2, 550, 1023, 0, 1)" line126="            R_percentage = Math.map(k_x2, 550, 1023, 0, 1)" line127="        }" line128="" line129="        if (k_x2 &gt;= 507 &amp;&amp; k_x2 &lt;= 509 &amp;&amp; k_y2 &gt;= 507 &amp;&amp; k_y2 &lt;= 509) {" line130="            L_percentage = 0" line131="            R_percentage = 0" line132="            L_percentage_backward = 0" line133="            R_percentage_backward = 0" line134="        }" line135="" line136="        if (k_b12 == 0) {" line137="            pins.analogWritePin(AnalogPin.P13, 0)" line138="            pins.analogWritePin(AnalogPin.P12, 200)" line139="            pins.analogWritePin(AnalogPin.P15, 200)" line140="            pins.analogWritePin(AnalogPin.P14, 0)" line141="            basic.pause(5)" line142="        }" line143="" line144="        if (k_b42 == 0) {" line145="            pins.analogWritePin(AnalogPin.P13, 200)" line146="            pins.analogWritePin(AnalogPin.P12, 0)" line147="            pins.analogWritePin(AnalogPin.P15, 0)" line148="            pins.analogWritePin(AnalogPin.P14, 200)" line149="            basic.pause(5)" line150="        }" line151="" line152="        if (k_b22 == 0) {" line153="            angle = high" line154="" line155="        }" line156="" line157="        if (k_b32 == 0) {" line158="            angle = low" line159="        }" line160="" line161="        pins.analogWritePin(AnalogPin.P13, L_Speed * L_percentage)" line162="        pins.analogWritePin(AnalogPin.P12, L_Speed * L_percentage_backward)" line163="        pins.analogWritePin(AnalogPin.P15, R_Speed * R_percentage)" line164="        pins.analogWritePin(AnalogPin.P14, R_Speed * R_percentage_backward)" line165="" line166="        return angle" line167="    }" line168="    //% block" line169="    //% LeftMotorPin1.defl=12" line170="    //% LeftMotorPin2.defl=13" line171="    //% RightMotorPin1.defl=14" line172="    //% RightMotorPin2.defl=15" line173="    //% blockId=&quot;KuangRobot_motorDriverPins&quot; block=&quot;Motor Driver Pin | Left Motor=  %LeftMotorPin1 %LeftMotorPin2 | Right Motor= %RightMotorPin1 %RightMotorPin2&quot;" line174="    export function motorDriverPins(LeftMotorPin1: AnalogPin, LeftMotorPin2: AnalogPin, RightMotorPin1: AnalogPin, RightMotorPin2: AnalogPin): void {" line175="" line176="    }" line177="" line178="    //% block" line179="    //% blockId=&quot;servo&quot; block=&quot;Target Servo Angle: %targetAngle  Current Servo Angle: %currentAngle ServoPin: %servoPin&quot;" line180="    export function servoMove(targetAngle: number, currentAngle:number, servoPin: AnalogPin) : number {" line181="        if (targetAngle != currentAngle) {" line182="            currentAngle = targetAngle" line183="            pins.servoWritePin(servoPin, currentAngle)" line184="            basic.pause(500)" line185="        }" line186="        return currentAngle" line187="    }" line188="}" numlines="189"></mutation></block></statement></block></xml>